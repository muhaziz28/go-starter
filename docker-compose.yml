version: "3.8"

services:
  # Main Application
  go-starter:
    build:
      context: .
      dockerfile: Dockerfile
    image: go-starter:latest
    container_name: go-starter-prod
    restart: unless-stopped

    # Security: Non-root user, read-only filesystem
    user: "10001:10001"
    read_only: true

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

    # Port mapping
    ports:
      - "3000:3000"

    # Environment variables (NEVER use .env file in production)
    environment:
      - PORT=3000
      - DB_HOST=mysqldb
      - DB_PORT=3306
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - APP_ENV=production
      - LOG_LEVEL=info

    # Health check
    healthcheck:
      test: ["/app", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Dependencies
    depends_on:
      mysqldb:
        condition: service_healthy

    # Networks
    networks:
      - go-starter-network

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MySQL Database
  mysqldb:
    image: mysql:8.0
    container_name: go-starter-mysql-prod
    restart: unless-stopped

    # Security: Custom user
    user: "999:999"

    # MySQL optimized command
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --thread-cache-size=16
      --query-cache-size=32M
      --query-cache-limit=2M

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M

    # Port (only expose if needed for external access)
    ports:
      - "127.0.0.1:3306:3306" # Only localhost access

    # Environment
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_HOST=%

    # Volumes
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/config/my.cnf:/etc/mysql/conf.d/my.cnf:ro

    # Health check
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_ROOT_PASSWORD}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

    # Networks
    networks:
      - go-starter-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: go-starter-nginx-prod
    restart: unless-stopped

    # Port mapping
    ports:
      - "80:80"
      - "443:443"

    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx

    # Dependencies
    depends_on:
      - go-starter

    # Networks
    networks:
      - go-starter-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M

  # Optional: Database Admin (remove in production)
  # adminer:
  #   image: adminer
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:8080:8080"  # Only localhost
  #   networks:
  #     - go-starter-network

# Volumes
volumes:
  mysql_prod_data:
    driver: local

# Networks
networks:
  go-starter-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
